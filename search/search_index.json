{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DecLog Dec orator Log ger. A minimal boilerplate logger for functions. Getting Started If you wish to use this library, simply use pip to install the latest version from PyPI. $ pip install declog Usage Analysis code is typically run through a main processing function, which draws together library code to produce a meaningful result. The logger is applied as a decorator to the processing function, and captures the function arguments, intermediate values marked with log and the return value. from declog.loggers.logger import Logger, log from declog.databases.database import Database class MyLogger(Logger): db = Database() unique_keys = ['function_name', 'datetime'] @MyLogger def my_processing_function(a, b, c=2, d=3.14): ab = a * b log('ab', ab) cd = c - d log(cd) return ab + cd if __name__ == '__main__': my_processing_function(1, 5) print(my_processing_function.db) The Logger is designed to be flexible, in the above example the base class Database is used which only saves logged items to a dictionary in memory. For use as a proper logger, the database must be saved to memory. View the reference for options or create your own backend as in the tutorial . For more information on usage, check out the about page or tutorials in the docs. Contributing All contributions are welcome! Please raise an issue or pull request. To get set up, run the following: $ git clone https://github.com/josh-read/declog.git $ cd declog $ python3.11 venv venv $ source venv/bin/activate $ python3 -m pip install --upgrade pip $ python3 -m pip install -e \".[dev]\" $ pre-commit install This will download the source code from git, create a virtual environment, install a live (editable version) the package along with the development dependencies, and install the pre-commit hooks, which ensure the code conforms with the project code style (black and flake8).","title":"Home"},{"location":"#declog","text":"Dec orator Log ger. A minimal boilerplate logger for functions.","title":"DecLog"},{"location":"#getting-started","text":"If you wish to use this library, simply use pip to install the latest version from PyPI. $ pip install declog","title":"Getting Started"},{"location":"#usage","text":"Analysis code is typically run through a main processing function, which draws together library code to produce a meaningful result. The logger is applied as a decorator to the processing function, and captures the function arguments, intermediate values marked with log and the return value. from declog.loggers.logger import Logger, log from declog.databases.database import Database class MyLogger(Logger): db = Database() unique_keys = ['function_name', 'datetime'] @MyLogger def my_processing_function(a, b, c=2, d=3.14): ab = a * b log('ab', ab) cd = c - d log(cd) return ab + cd if __name__ == '__main__': my_processing_function(1, 5) print(my_processing_function.db) The Logger is designed to be flexible, in the above example the base class Database is used which only saves logged items to a dictionary in memory. For use as a proper logger, the database must be saved to memory. View the reference for options or create your own backend as in the tutorial . For more information on usage, check out the about page or tutorials in the docs.","title":"Usage"},{"location":"#contributing","text":"All contributions are welcome! Please raise an issue or pull request. To get set up, run the following: $ git clone https://github.com/josh-read/declog.git $ cd declog $ python3.11 venv venv $ source venv/bin/activate $ python3 -m pip install --upgrade pip $ python3 -m pip install -e \".[dev]\" $ pre-commit install This will download the source code from git, create a virtual environment, install a live (editable version) the package along with the development dependencies, and install the pre-commit hooks, which ensure the code conforms with the project code style (black and flake8).","title":"Contributing"},{"location":"about/","text":"The problem Existing logging libraries are geared towards logging for long-running services Sometimes we write code to execute a routine, more like a script. This library aims to be a convenient logger for these functions with minimal boilerplate. We often repeat the same analysis routine for many datasets. Often we require not only the final output of the routine, but wish to log intermediate values. If we compare two results, we need to know whether the analysis code was the same or different. (Most obvious way to do this is to compare code version, however it is not always this simple.) Logging should be easy and not require the user to have to figure out correct paths to store results. The solution Decorate the 'main' function which is the top level entry point to the analysis routine. All settings should be managed in the arguments supplied to the function, which allows them to be captured by the decorator. Logging is still achieved simply with the log function, which will ascend the call stack until it reaches the __call__ method of the Logger at which point the Logger will handle the logged variable.","title":"About"},{"location":"about/#the-problem","text":"Existing logging libraries are geared towards logging for long-running services Sometimes we write code to execute a routine, more like a script. This library aims to be a convenient logger for these functions with minimal boilerplate. We often repeat the same analysis routine for many datasets. Often we require not only the final output of the routine, but wish to log intermediate values. If we compare two results, we need to know whether the analysis code was the same or different. (Most obvious way to do this is to compare code version, however it is not always this simple.) Logging should be easy and not require the user to have to figure out correct paths to store results.","title":"The problem"},{"location":"about/#the-solution","text":"Decorate the 'main' function which is the top level entry point to the analysis routine. All settings should be managed in the arguments supplied to the function, which allows them to be captured by the decorator. Logging is still achieved simply with the log function, which will ascend the call stack until it reaches the __call__ method of the Logger at which point the Logger will handle the logged variable.","title":"The solution"},{"location":"reference/","text":"","title":"Reference"},{"location":"tutorial/","text":"whole page on facility example set unique keys set automatic filling keys specialised database","title":"Tutorial"},{"location":"tutorial/#whole-page-on-facility-example","text":"","title":"whole page on facility example"},{"location":"tutorial/#set-unique-keys","text":"","title":"set unique keys"},{"location":"tutorial/#set-automatic-filling-keys","text":"","title":"set automatic filling keys"},{"location":"tutorial/#specialised-database","text":"","title":"specialised database"}]}